"""
Django settings for projectname project.

Generated by 'django-admin startproject' using Django 1.8.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

GDRAT_abs_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'media/product_image/placeholder.gif')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'nx3mfq9y2j#5&f#e)o7u=b&9n0$7s@rtsw7p)&z4j025^e^w@m'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

ADMINS = [('Test','testmail5298@gmail.com'),] #('Tech', 'tech@wishbooks.io'),
MANAGERS = [('Test','testmail5298@gmail.com'),] #('Tech', 'tech@wishbooks.io'),

# Application definition

INSTALLED_APPS = (
    #'dal',
    #'dal_select2',
    
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    #'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    
    'rest_framework',
    'rest_framework.authtoken',
    'rest_auth',
    
    'allauth',
    'allauth.account',
    'rest_auth.registration',
    
    'allauth.socialaccount',
    
    'api',
    'urlshortner',
    
    'push_notifications',
    'versatileimagefield',
    
    'import_export',
    
    'eav',
    
    'debug_toolbar',
    
    'django_cron',
    
    'easy_select2',
    'impersonate',
    
    'notifier',
    
    'rest_framework_docs',
    
    #'userlog',
    #'django.contrib.humanize',
    #'cachalot',
    
    'djcelery',
    
    #'reversion',
    #'simple_history',
    
    'rest_framework_tracking',
    
    
    #'sorl.thumbnail',
    #'imagekit',
    
    'django_q',
    #'daterange_filter',
    'rangefilter',
    
    #'silver',#must use 'dal', for silver
    'multiselectfield',
    
)

MIDDLEWARE_CLASSES = (
    #'debug_toolbar.middleware.DebugToolbarMiddleware',
    #'userlog.middleware.UserLogMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',###
    'api.middleware.DisableCSRFOnDebug',
  #  'last_modified.middleware.CacheControlMiddleware',
    ##'last_modified.middleware.LastModifiedMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    
    #'simple_history.middleware.HistoryRequestMiddleware',
    'impersonate.middleware.ImpersonateMiddleware',
    
    'django.middleware.common.BrokenLinkEmailsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    
    'audit_log.middleware.UserLoggingMiddleware',
)

##LAST_MODIFIED_FUNC = 'api.v0.views.last_modified'

ROOT_URLCONF = 'projectname.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                #'django.template.context_processors.debug',
                ###'django.template.context_processors.request',
                ###'django.contrib.auth.context_processors.auth',
                #'django.contrib.messages.context_processors.messages',
                ###'allauth.account.context_processors.account',
                ###'allauth.socialaccount.context_processors.socialaccount',
                
                'django.contrib.auth.context_processors.auth',
                'django.core.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'projectname.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'b2bcatalog5',
        'USER': 'root',
        'PASSWORD': '<TOADD>',
        'HOST': 'localhost',
        'PORT': '3306',
    }
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        #'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
        'rest_framework.permissions.DjangoModelPermissions'
    ),
    #'PAGE_SIZE': 10,
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ),
    
    #'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    #'PAGE_SIZE': 10,
    
    'NON_FIELD_ERRORS_KEY': 'failed',
    
    #'DATETIME_FORMAT' : '%Y-%m-%d %I:%M:%S %p',
}

PUSH_NOTIFICATIONS_SETTINGS = {
        "GCM_API_KEY": "<TOADD>",
        "GCM_POST_URL": "https://gcm-http.googleapis.com/gcm/send",
        "FCM_API_KEY": "<TOADD>",
        "FCM_POST_URL": "https://fcm.googleapis.com/fcm/send",
        "APNS_CERTIFICATE": os.path.join(BASE_DIR, 'apns/pushcert.pem'),
}

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata' #'UTC' #Asia/Kolkata

USE_I18N = True

USE_L10N = True

USE_TZ = True




#ACCOUNT_SIGNUP_FORM_CLASS = 'api.forms.SignupForm'
REST_AUTH_SERIALIZERS = {
    'USER_DETAILS_SERIALIZER': 'api.v1.serializers.UserSerializer',
    'LOGIN_SERIALIZER': 'api.v0.serializers.LoginSerializer',
}

REST_SESSION_LOGIN = True
###EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
###if DEBUG:
###    EMAIL_BACKEND = 'django.core.mail.backends.dummy.EmailBackend'
SITE_ID = 1
ACCOUNT_EMAIL_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'username'
#ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_EMAIL_VERIFICATION = "none" #"optional" #

REST_AUTH_REGISTER_SERIALIZERS = {
    'REGISTER_SERIALIZER': 'api.v0.serializers.RegisterSerializer',
}


EMAIL_USE_TLS = True
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = '<TOADD>' #'tech@wishbooks.io'#'sanchig@smedge.in'
DEFAULT_FROM_EMAIL = '<TOADD>' #'tech@wishbooks.io'
SERVER_EMAIL = '<TOADD>' #'tech@wishbooks.io'
EMAIL_HOST_PASSWORD = '<TOADD>'
EMAIL_PORT = 587


    
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/' #'http://aks.b2bapi.com/static/'
STATIC_ROOT = 'static/'

MEDIA_ROOT = 'media/'

MEDIA_URL = 'http://aks.b2bapi.com/media/'

VERSATILEIMAGEFIELD_SETTINGS = {
     # The amount of time, in seconds, that references to created images
     # should be stored in the cache. Defaults to `2592000` (30 days)
    'cache_length': 2592000,
    # The name of the cache you'd like `django-versatileimagefield` to use.
    # Defaults to 'versatileimagefield_cache'. If no cache exists with the name
    # provided, the 'default' cache will be used instead.
    'cache_name': 'versatileimagefield_cache',
    # The save quality of modified JPEG images. More info here:
    # http://pillow.readthedocs.org/en/latest/handbook/image-file-formats.html#jpeg
    # Defaults to 70
    'jpeg_resize_quality': 100,
    # The name of the top-level folder within storage classes to save all
    # sized images. Defaults to '__sized__'
    'sized_directory_name': '__sized__',
    # The name of the directory to save all filtered images within.
    # Defaults to '__filtered__':
    'filtered_directory_name': '__filtered__',
    # The name of the directory to save placeholder images within.
    # Defaults to '__placeholder__':
    'placeholder_directory_name': '__placeholder__',
    # Whether or not to create new images on-the-fly. Set this to `False` for
    # speedy performance but don't forget to 'pre-warm' to ensure they're
    # created and available at the appropriate URL.
    'create_images_on_demand': True,
    
    'progressive_jpeg': True
}

#PRODUCT_SMALL_IMAGE = '150x210'
#PRODUCT_MEDIUM_IMAGE = '700x980'

SMALL_SQR_IMAGE = '150x150'
SMALL_IMAGE = '150x210'
MEDIUM_IMAGE = '357x500'
LARGE_IMAGE = '700x980'


VERSATILEIMAGEFIELD_RENDITION_KEY_SETS = {
    #~ 'product_image': [
        #~ ('full_size', 'url'),
        #~ ('thumbnail_small', 'thumbnail__150x210'),
        #~ ('thumbnail_medium', 'thumbnail__400x562'),
        #~ ('thumbnail_large', 'thumbnail__700x980'),
        #~ ('thumbnail_xlarge', 'thumbnail__1000x1400')
    #~ ],
    'product_image': [
        ('full_size', 'url'),
        ('thumbnail_small', 'thumbnail__'+SMALL_IMAGE),
        ('thumbnail_medium', 'thumbnail__'+LARGE_IMAGE)
    ],

    'catalog_image': [
        ('full_size', 'url'),
        ('thumbnail_small', 'thumbnail__'+SMALL_IMAGE),
        ('thumbnail_medium', 'thumbnail__'+MEDIUM_IMAGE)
#       ('thumbnail_medium', 'thumbnail__535x750')
#       ('thumbnail_medium', 'thumbnail__700x980')
#       ('thumbnail_medium', 'thumbnail__400x562')

    ],
    
    'brand_image': [
        ('full_size', 'url'),
        ('thumbnail_small', 'thumbnail__'+SMALL_SQR_IMAGE)
    ],
    'company_image': [
        ('full_size', 'url'),
        ('thumbnail_small', 'thumbnail__'+SMALL_SQR_IMAGE)
    ],
    'promotion_image': [
        ('full_size', 'url'),
        ('banner', 'thumbnail__400x100')
    ],
    'category_image': [
        ('full_size', 'url'),
        ('thumbnail_small', 'thumbnail__'+SMALL_SQR_IMAGE)
    ],
}

#VERSATILEIMAGEFIELD_USE_PLACEHOLDIT = True


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': '/home/tech3/b2b/django-user/projectname/info.log',
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
        'api': {
            'handlers': ['file'],
            'level': 'INFO',
        },
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
    },
}

'''import fakeredis
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379",
        "OPTIONS": {
            "REDIS_CLIENT_CLASS": "fakeredis.FakeStrictRedis",
            "PICKLE_VERSION": -1,  # Use the latest protocol version
            "SOCKET_CONNECT_TIMEOUT": 0,  # in seconds
            "SOCKET_TIMEOUT": 0,  # in seconds
        }
    }
}'''
'''CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}'''

'''CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '127.0.0.1:11211',
    }
}'''

'''CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    'userlog': {
        'BACKEND': 'redis_cache.RedisCache',
        'LOCATION': '0.0.0.0:6379',
        'TIMEOUT': 3600,
        'KEY_PREFIX': 'userlog',
        
        
    },
}'''


#IMPORT_EXPORT_USE_TRANSACTIONS = True

SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
'''SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"
DJANGO_REDIS_LOGGER = '/home/tech3/b2b/django-user/projectname/redislog.logger'
'''

# CELERY STUFF
#CELERY_RESULT_BACKEND = 'redis://localhost:6379'
#BROKER_URL = 'redis://localhost:6379'


####---working below in ubuntu 16.4---####
#~ CELERY_RESULT_BACKEND = "redis://localhost:6379/2"
#~ BROKER_URL = 'redis://localhost:6379/2'
CELERY_RESULT_BACKEND='djcelery.backends.cache:CacheBackend'
BROKER_URL = 'sqla+sqlite:///celerydb.sqlite'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Kolkata'

from datetime import datetime, date, time, timedelta
# The default Django db scheduler
CELERYBEAT_SCHEDULER = "djcelery.schedulers.DatabaseScheduler"
CELERYBEAT_SCHEDULE = {
    'run-every-5-seconds': {
        'task': 'api.tasks.testing_task',
        'schedule': timedelta(seconds=5)#,
        #'args': ()
    },
}


#DEBUG_TOOLBAR_PATCH_SETTINGS = False

DEBUG_TOOLBAR_PANELS = [
    'debug_toolbar.panels.versions.VersionsPanel',
    'debug_toolbar.panels.timer.TimerPanel',
    'debug_toolbar.panels.settings.SettingsPanel',
    'debug_toolbar.panels.headers.HeadersPanel',
    'debug_toolbar.panels.request.RequestPanel',
    'debug_toolbar.panels.sql.SQLPanel',
    'debug_toolbar.panels.staticfiles.StaticFilesPanel',
    'debug_toolbar.panels.templates.TemplatesPanel',
    'debug_toolbar.panels.cache.CachePanel',
    'debug_toolbar.panels.signals.SignalsPanel',
    'debug_toolbar.panels.logging.LoggingPanel',
    'debug_toolbar.panels.redirects.RedirectsPanel',
    #'cachalot.panels.CachalotPanel',
]

CRON_CLASSES = [
    "api.v0.views.MyCronJob",
]


IMPERSONATE = {
    'REDIRECT_URL': '/'
}
#IMPERSONATE_REDIRECT_URL = '/'
#IMPERSONATE_REQUIRE_SUPERUSER = True


NOTIFIER_BACKENDS = (
    'api.v0.notifier_backend.EmailBackend',
    'api.v0.notifier_backend.SMS',
    'api.v0.notifier_backend.InApp',
    'api.v0.notifier_backend.Chat',
)

REST_FRAMEWORK_DOCS = {
    'HIDE_DOCS': False  # Default: False
}

#import requests
#import json
import base64
applozic_credential = 'tech@wishbooks.io:<TOADD>'
applozic_credential = base64.b64encode(applozic_credential)

APPLOZIC_APPID = '<TOADD>>'

APPLOZIC_HEADERS = {'Content-Type': 'application/json',
	'Apz-AppId': APPLOZIC_APPID,
	'Apz-Token': 'Basic '+applozic_credential,
}

APPLOZIC_URL = 'https://apps.applozic.com/rest/ws/'#user/info?userIds=jay

import djcelery
djcelery.setup_loader()

PUSH_AMOUNT_PER_VIEWED = 0.5

SMS_METHOD = 'smsSendTextNation' #'smsSendSendSmart' #'smsSendICubes' #
PRIORITY_SMS_METHOD = 'smsSendTextNation' #'smsSendICubes' #'msg91'
OTP_SMS_METHOD = 'smsSendICubes' #'msg91' #'smsSendICubes'


SHARE_SMS_LIMIT = 1
TASK_QUEUE_METHOD = 'djangoQ' #'celery' #

PAYTM_STATUS_URL = 'https://secure.paytm.in/oltp/HANDLER_INTERNAL/TXNSTATUS'
PAYTM_URL = 'https://secure.paytm.in/oltp-web/processTransaction'
PAYTM_MID = '<TOADD>'
PAYTM_MERCHANT_KEY = '<TOADD>'



Q_CLUSTER = {
    'name': 'trivenilabs',
    'workers': 4,
    'recycle': 500,
    'timeout': 6000,
    'compress': True,
    'save_limit': 250,
    'queue_limit': 500,
    'cpu_affinity': 1,
    'label': 'Django Q',
    'redis': {
        'host': '127.0.0.1', #'54.169.47.164', #
        'port': 6379,
        'db': 0, 
    }
}


'''import datetime

SILVER_DEFAULT_DUE_DAYS = 5
SILVER_DOCUMENT_PREFIX = 'documents/'
SILVER_DOCUMENT_STORAGE = None
SILVER_PAYMENT_TOKEN_EXPIRATION = datetime.timedelta(minutes=5)
SILVER_AUTOMATICALLY_CREATE_TRANSACTIONS = True

PAYMENT_PROCESSORS = {
    'manual': {
        'class': 'silver.payment_processors.manual.ManualProcessor'
    },
}'''

INTERNAL_IPS = '127.0.0.1' #django debug toolbar

MAX_CATALOG_UPLOAD_LIMIT = 10
PAID_CLIENTS = [252, 245]

GLOBAL_SITE_URL = "http://app.wishbooks.io/"

GOOGLE_API_KEY = "<TOADD>"

CACHE_EXPIRE_TIME = 3600

ELASTICSEARCH_HOST = "localhost"

FACEBOOK_MESSAGE_ACCESS_TOKEN = "<TOADD>"
